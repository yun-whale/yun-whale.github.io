<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>lamp</title>
      <link href="/2022/06/11/lamp/"/>
      <url>/2022/06/11/lamp/</url>
      
        <content type="html"><![CDATA[<h1 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h1><span id="more"></span><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol><li>在PHP中，关键字不区分大小写</li><li>用户自定义的类名或函数名也不区分大小写</li><li>但是变量名是区分大小写的</li></ol><h3 id="五种输出函数："><a href="#五种输出函数：" class="headerlink" title="五种输出函数："></a>五种输出函数：</h3><ul><li>print()函数</li><li>echo()函数</li><li>printf()函数</li><li>sprintf()函数</li><li>print_r()函数</li></ul><h3 id="PHP有8种常用的数据类型，4种基本数据类型，2种复合数据类型，2种特殊数据类型："><a href="#PHP有8种常用的数据类型，4种基本数据类型，2种复合数据类型，2种特殊数据类型：" class="headerlink" title="PHP有8种常用的数据类型，4种基本数据类型，2种复合数据类型，2种特殊数据类型："></a><span style="color:cyan">PHP有8种常用的数据类型，4种基本数据类型，2种复合数据类型，2种特殊数据类型：</span></h3><h4 id="4种基本数据类型"><a href="#4种基本数据类型" class="headerlink" title="4种基本数据类型"></a>4种基本数据类型</h4><ol><li>布尔型（boolean）</li><li>整型（integer）</li><li>浮点型（float）</li><li>字符串型（string）<h4 id="2种复合数据类型"><a href="#2种复合数据类型" class="headerlink" title="2种复合数据类型"></a>2种复合数据类型</h4></li><li>数组型（array）</li><li>对象型（object）<h4 id="2种特殊数据类型"><a href="#2种特殊数据类型" class="headerlink" title="2种特殊数据类型"></a>2种特殊数据类型</h4></li><li>资源型（resource）</li><li>NULL(空)型(NULL)</li></ol><h3 id="判断变量的确切类型的函数"><a href="#判断变量的确切类型的函数" class="headerlink" title="判断变量的确切类型的函数:"></a>判断变量的确切类型的函数:</h3><ul><li>gettype( ):返回指定的变量的数据类型</li><li>settype( ):可以将变量设定为指定的类型</li><li>is_numeric( ):判断是否是数值类型</li><li>is_scalar( ):判断是否是标量类型，即单个一项信息类型，如布尔型，浮点型，而数组，对象型不是。</li><li>is_float( )：判断是否是浮点</li><li>is_array( )：判断是否是数组</li><li>is_string( )：判断是否是字符串</li><li>is_object( )：判断是否是对象</li><li>is_integer( )：判断是否是整数</li><li>is_null( )：判断是否是NULL</li><li>is_resource( )：判断是否是资源类型</li></ul><h3 id="常量分为预定义常量和自定义常量两种"><a href="#常量分为预定义常量和自定义常量两种" class="headerlink" title="常量分为预定义常量和自定义常量两种"></a><span style="color:skyblue">常量分为预定义常量和自定义常量两种</span></h3><h4 id="预定义常量有："><a href="#预定义常量有：" class="headerlink" title="预定义常量有："></a>预定义常量有：</h4><ul><li><em>FILE</em>    当前PHP程序文件名</li><li><em>LINE</em>    当前PHP程序所在的行数</li><li>PHP_VERSION    当前PHP程序的版本</li><li>PHP_OS    执行PHP解析的操作系统名称<h4 id="常用的预定义变量："><a href="#常用的预定义变量：" class="headerlink" title="常用的预定义变量："></a>常用的预定义变量：</h4></li><li>$GLOBALS   包含所有全局变量的数组</li><li>$_COOKIE    通过HTTP Cookie方式提交给该脚本的       变量数组</li><li>$_SERVER   服务器环境变量数组</li><li><span style="color:red">$_GET    通过HTTP GET方式提交给该脚本的变量数组</span></li><li><span style="color:red">$_POST  通过HTTP POST方式提交给该脚本的变量数组</span></li><li>$_FILES                  与文件上传相关的变量数组</li><li>$_ENV                     环境变量数组</li><li>$_SESSION            会话变量数组</li><li>$_REQUEST           用户提交的变量数组</li><li>$QUERY_STRING  查询字符串的内容，即URL中第一    个问号后边的内容</li><li>$DOCUMENT_ROOT    当前脚本所在的文档根目录</li><li>$HTTP_ACCEPT     当前请求的Accept头信息的内容</li><li>$HTTP_ACCEPT_CHARSET  当前请求的accept-   Charset头信息的内容</li><li>$REQUEST_METHOD   访问页面时的请求方法，如                                  GET,HEAD,POST或PUT</li><li>$SERVER_PROTOCOL  访问页面时的通信协议，名 称和版本号，如“HTTP&#x2F;1.0”</li><li>$HTTP_HOST     主机名称</li></ul><h3 id="使用超全局变量数组"><a href="#使用超全局变量数组" class="headerlink" title="使用超全局变量数组"></a><span style="color:aqua">使用超全局变量数组</span></h3><ul><li>$_SERVER数组</li><li>$_GET数组</li><li>$_POST数组</li><li>$_COOKIE数组</li><li>$_FILES数组</li><li>$_ENV数组</li><li>$_GLOBALS数组</li><li>$_SESSION数组</li><li>$_REQUEST数组</li></ul><h3 id="变量的作用域包括5种："><a href="#变量的作用域包括5种：" class="headerlink" title="变量的作用域包括5种："></a>变量的作用域包括5种：</h3><ol><li>局部作用域</li><li>全局作用域</li><li>静态变量</li><li>函数参数</li><li>超全局作用域</li></ol><h3 id="PHP中的运算符与表达式"><a href="#PHP中的运算符与表达式" class="headerlink" title="PHP中的运算符与表达式"></a><span style="color:skyblue">PHP中的运算符与表达式</span></h3><h4 id="算术运算符："><a href="#算术运算符：" class="headerlink" title="算术运算符："></a>算术运算符：</h4><ul><li>+  求和                </li><li>-   求差</li><li>*  求乘积              </li><li>/  求商</li><li>%  求余数            </li><li>- （算术取负）  求一个数的负数形式</li><li>+（算术断言）  求一个数的正数形式<h4 id="赋值运算分为"><a href="#赋值运算分为" class="headerlink" title="赋值运算分为"></a>赋值运算分为</h4></li></ul><ol><li><p>基本赋值运算符:</p><p> 直接将一个值赋给变量，使用符号“&#x3D;”表示</p></li><li><p>复合赋值运算符：</p><p> 每个算术运算符与字符串连接操作都有与之相对应的连接赋值运算符。</p></li></ol><p>+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;，.&#x3D;，%&#x3D;，^&#x3D;，&amp;&#x3D;，!&#x3D;，&lt;&lt;&#x3D;，&gt;&gt;&#x3D;，~&#x3D;</p><h4 id="比较运算符有："><a href="#比较运算符有：" class="headerlink" title="比较运算符有："></a>比较运算符有：</h4><ul><li>&#x3D;&#x3D;，!&#x3D;，&lt;，&gt;，&lt;&#x3D;，&gt;&#x3D;</li><li>&#x3D;&#x3D;&#x3D;     恒等，判断两个数是否相等且是同一类型</li><li>!&#x3D;&#x3D;      不恒等，判断两个数不相等或者类型不同<h4 id="PHP中的逻辑运算符有："><a href="#PHP中的逻辑运算符有：" class="headerlink" title="PHP中的逻辑运算符有："></a>PHP中的逻辑运算符有：</h4></li><li>！       逻辑非          not    逻辑非           </li><li>&amp;&amp;      逻辑与         and    逻辑与</li><li>||         逻辑或         or       逻辑或</li><li>xor 逻辑异或<h4 id="位运算符有"><a href="#位运算符有" class="headerlink" title="位运算符有:"></a>位运算符有:</h4></li><li>&amp; 按位与</li><li>&lt;&lt; 向左位移</li><li>&gt;&gt; 向右位移</li><li>| 按位或</li><li>~ 按位取反</li><li>^ 按位异或<h4 id="字符串运算符："><a href="#字符串运算符：" class="headerlink" title="字符串运算符："></a>字符串运算符：</h4></li></ul><p>连接运算符（用英文句号“.”表示）</p><p><span style="color:GreenYellow ">错误屏蔽运算符（@）</span></p><h2 id="PHP中的流程控制"><a href="#PHP中的流程控制" class="headerlink" title="PHP中的流程控制"></a>PHP中的流程控制</h2><h3 id="条件结构"><a href="#条件结构" class="headerlink" title="条件结构"></a>条件结构</h3><p>if语句<br><br>else语句<br><br>elseif语句<br></p><h3 id="if的交互格式"><a href="#if的交互格式" class="headerlink" title="if的交互格式"></a>if的交互格式</h3><p>if（表达式1）：<br><br>语句块1；<br><br>else： <br><br>语句块2；<br><br>endif;</p><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p>switch<br><br>{<br><br> case  表达式1：语句块1；<br><br> case  表达式2：语句块2；<br><br> …….<br><br> case  表达式n：语句块n；<br><br> default：语句块n+1；<br><br>}</p><h3 id="循环结构语句有："><a href="#循环结构语句有：" class="headerlink" title="循环结构语句有："></a>循环结构语句有：</h3><p>while语句<br><br>do…while语句<br><br>for语句<br><br>foreach语句<br></p><p>结束语句 break<br><br>跳过本次循环 continue语句<br><br>exit语句可以结束当前整个脚本的执行</p><h2 id="PHP函数的特点"><a href="#PHP函数的特点" class="headerlink" title="PHP函数的特点"></a>PHP函数的特点</h2><ul><li>函数的调用可以早于函数的定义</li><li>PHP不支持函数重载，因此必须使用唯一的名称定义函数。</li><li>PHP函数不支持函数参数个数可变的情况</li><li>PHP函数可以使用默认函数<h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3></li><li>函数include( ):载入指定文件<br><br>  给出一个警告，脚本仍会继续执行</li><li>函数require( ):载入指定文件<br><br>  导致一个致命错误，代码立即停止执行</li><li>include_once( )和require_once( )函数分别是include( )函数和require( )函数的变体函数。</li></ul><h2 id="数组相关运算"><a href="#数组相关运算" class="headerlink" title="数组相关运算"></a>数组相关运算</h2><ul><li>+  联合      $a+$b     数组$b附加在数组$a的后面</li><li>&#x3D;&#x3D;         等于     $a&#x3D;&#x3D;$b    判断$a,$b是否包含相同元素</li><li>!&#x3D;        不等于    $a!&#x3D;$b    判断$a,$b是否包含不同元素</li><li>&lt;&gt;     不等于   $a&lt;&gt;$b    判断$a,$b是否包含不同元素</li><li>&#x3D;&#x3D;&#x3D;       恒等     $a&#x3D;&#x3D;&#x3D;$b   判断是否包含相同顺序的相                            同元素</li><li>!&#x3D;&#x3D;      不恒等   $a!&#x3D;&#x3D;$b   判断是否不包含相同顺序的                                    相同元素</li></ul><h2 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h2><p>正向排序函数有：<br></p><ul><li>sort( )函数：按数字和字母的顺序（先数字后字母）由低到高重新排列数组元素。</li><li>asort( )函数：保留原来的索引关系，按照由低到高(升序)对数组元素值进行排序。</li><li>ksort( )函数：按索引值进行排序，按照从低到高的顺序。</li><li>函数usort( ):按用户自定义方法排序<br>函数array_multisort( ):一次对多个数组进行排序</li><li>natsort( )函数：保留原有的索引关系，按照人们通常对字母，数字及字符串的自然排序的方法进行排序。</li><li>函数natcasesort( ):自然排序(不区分大小写)</li></ul><h3 id="反向排序函数有："><a href="#反向排序函数有：" class="headerlink" title="反向排序函数有："></a>反向排序函数有：</h3><ul><li>rsort( )函数：按数字和字母的顺序（先数字后字母）由高到低重新排列数组元素。</li><li>arsort( )函数：保留原来的索引关系，按照由高到低(降序)对数组元素值进行排序。</li><li>krsort( )函数：按索引值进行排序，按照从高到低的顺序。</li><li>函数usort( ):按用户自定义方法排序</li></ul><h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><ul><li>函数current( )：获取数组中当前指针所指的元素值</li><li>函数next( )：将数组的指针向后移动一位</li><li>函数prev( )：将数组的指针向前移动一位</li><li>函数reset( )：指针设置回数组的起始位置</li><li>函数end( )：将指针移动到数组的最后一个元素处</li><li>函数each( )：获取数组中当前的“索引&#x2F;元素值”对</li><li>函数key( )：获取数组当前指针所指向元素的索引值</li><li>函数array_walk( )：以相同的方式对数组中的每一个元素进行处理</li><li>函数array_reduce( )：将自定义函数依次应用于数组中的每个元素</li></ul><h4 id="其他的数组操作函数"><a href="#其他的数组操作函数" class="headerlink" title="其他的数组操作函数"></a>其他的数组操作函数</h4><ul><li>函数list( )：从一个数组中一次提取多个值。</li><li>函数count( )：计算数组中元素的个数。</li><li>函数array( )_count_value( )：统计数组元素的频度。</li><li>函数array_unique( )：删除数组中重复的元素值。</li><li>函数array_combine( )：根据参数数组生成新数组。</li><li>函数array_merge( )：将多个数组合并成一个新数组。</li><li>函数array_merge_recursive( )：将多个数组递归合并成一个新数组。</li><li>函数array_slice( )：获取数组中的部分元素。</li><li>函数array_splice( )：删除数组中指定的数组元素。</li><li>函数array_intersect( )：获取在多个数组中重复出现的元素的值。</li><li>函数array_intersect_assoc( )：获取在多个数组中重复出现的元素（包括索引及元素值）。</li><li>函数array_diff( )：获取不在其他数组中重复出现的元素值。</li><li>函数array_diff_asso( )：获取不在其他数组中重复出现的元素（包括索引及元素值）。</li><li>函数array_sum( )：对数组中所有元素的值求和。</li><li>函数array_rand( )：随机返回数组的一个或多个索引。</li><li>函数array_chunk( )：将一维数组分解为多维数组。</li><li>函数array_push( )：将指定的变量的值加入到数组的末尾。</li><li>函数array_pop( )：获取数组中最后一个元素值。</li><li>函数array_shift( )：获取数组中第一个元素的值。</li><li>函数array_unshift( )：将指定变量的值加入到数组的开头。</li><li>函数array_pad( )：以指定数值对数组进行填充。</li><li>函数in_array( )：查找数组中是否包含指定的元素。</li><li>函数array_keys( )：获取数组中所有的索引。</li><li>函数array_key_exist( )：检测数组中是否包含指定的索引。</li><li>函数array_values( )：获取数组中所有的元素值。</li><li>函数array_search( )：在数组中搜索指定的值。</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="在PHP语言中有三种分隔方法表示字符串："><a href="#在PHP语言中有三种分隔方法表示字符串：" class="headerlink" title="在PHP语言中有三种分隔方法表示字符串："></a>在PHP语言中有三种分隔方法表示字符串：</h3><p>双引号：“这是一个字符串！”<br><br>单引号：‘这是一个字符串！’<br><br>Heredoc：&lt;&lt;&lt;heredoc_mark<br><br>这是一个字符串<br><br>heredoc_mark;</p><h3 id="去除空格和其他符号"><a href="#去除空格和其他符号" class="headerlink" title="去除空格和其他符号"></a>去除空格和其他符号</h3><ol><li><b>trim( )函数</b><br><br>该函数可以去除字符串中首尾处的空格或其他特殊字符，并返回去掉后的字符串。<br>该函数只能对字符串首尾字符进行过滤，字符串中间部分不参与过滤。</li><li><b>ltrim( )函数</b><br><br>该函数用于去除字符串左边的空格或其他特殊字符。</li><li><b>rtrim( )函数 </b><br><br>该函数用于去除字符串右边的空格或其他特殊字符。</li></ol><h3 id="字符串大小写的转换"><a href="#字符串大小写的转换" class="headerlink" title="字符串大小写的转换"></a>字符串大小写的转换</h3><ol><li><b>strtoupper( )：</b>将字符串转换成大写。</li><li><b>strtolower( )：</b>将字符串转换成小写。</li><li><b>ucfirst( )：</b>若字符串第一个字符是字母，则将其转换成大写字母。</li><li><b>ucwords( )：</b>将字符串中出现的每个单词的第一个字母转换成大写。</li></ol><h3 id="加入和删除反斜杠"><a href="#加入和删除反斜杠" class="headerlink" title="加入和删除反斜杠"></a>加入和删除反斜杠</h3><ul><li>addslashes( )函数（用于添加反斜杠）</li><li>stripsplashes( )函数（用于去除反斜杠）</li></ul><h3 id="HTML格式化"><a href="#HTML格式化" class="headerlink" title="HTML格式化"></a>HTML格式化</h3><ol><li>函数nl2br( )<br><br>nl2br( )函数可以将字符串中的换行符转换成HTML中的标签“<br>”,从而在 浏览器中实现换行。</li><li>htmlspecialchars( )函数<br><br>PHP提供htmlspecialchars( )函数，来把一些特殊的字符当成普通的文本输出。</li><li>htmlentities( )函数<br><br>htmlentities( )函数与htmlspecialchars( )函数基本一致，但该函数可以转义更多的HTML字符。</li><li>html_entity_decode函数<br><br>函数可以对显示字符串进行反向转换，转换后的字符串能够按HTML标签进行解析。</li><li>strip_tags( )函数<br><br>该函数可以去除所有的HTML和PHP标记。</li></ol><h3 id="字符串的连接和分割"><a href="#字符串的连接和分割" class="headerlink" title="字符串的连接和分割"></a>字符串的连接和分割</h3><ol><li>函数explode( )和函数split( ) ：分割字符串</li><li>函数implode( )和函数join( )：连接多个字符串</li><li>函数substr( )：提取部分子字符串</li><li>函数strtok( )：字符串分割提取</li></ol><h3 id="字符串的查找和替换"><a href="#字符串的查找和替换" class="headerlink" title="字符串的查找和替换"></a>字符串的查找和替换</h3><ul><li>在字符串中查找子字符串：函数strstr( )，stristr( )，strrchr( )。</li><li>查找子字符串的位置：函数strpos( )，strrpos( )，strripos( )，stripos( )。</li><li>替换子字符串：函数str_replace( )，substr_replace( )，str_ireplace( )。</li></ul><h3 id="其他字符串"><a href="#其他字符串" class="headerlink" title="其他字符串"></a>其他字符串</h3><ul><li>函数strlen( )：计算字符串的长度。</li><li>函数similar_text( )：比较字符串的相似性。</li><li><span style="color:red">函数str_shuffle( )：将字符串中的字符随机排列。</span></li><li>函数str_repeat( )：对字符串进行重复组合。</li><li>函数str_word_count( )：计算字符串中包含的单词个数。</li></ul><h2 id="PHP编程访问MySQL数据库的基本步骤归纳为："><a href="#PHP编程访问MySQL数据库的基本步骤归纳为：" class="headerlink" title="PHP编程访问MySQL数据库的基本步骤归纳为："></a>PHP编程访问MySQL数据库的基本步骤归纳为：</h2><ol><li>链接数据库服务器。<br><br>例如：$db&#x3D;mysql_connect(“localhost”, “root”, “”); </li><li>选择一个数据库。<br><br>例如：mysql_select_db(“mydb”, $db); </li><li>对数据库进行具体操作。<br><br>例如：$result &#x3D; mysql_query(“select * from employee”, $db); </li><li>对数据记录进行处理。<br><br>例如：$myrow&#x3D;mysql_fetch_row($result)<br><br>或$myrow&#x3D;mysql_fetch_array($result)<br><br>或$myrow&#x3D;mysql_fetch_assoc($result)<br><br>或$myrow&#x3D;mysql_fetch_object($result)</li><li>关闭数据库<br>例如：mysql_close($db);</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络安全攻防</title>
      <link href="/2022/06/06/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2/"/>
      <url>/2022/06/06/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h1><span id="more"></span><h3 id="zenmap十种扫描方式"><a href="#zenmap十种扫描方式" class="headerlink" title="zenmap十种扫描方式"></a>zenmap十种扫描方式</h3><ul><li><p>第一种：Intense scan</p><p>  <b><span style="color:red;">(nmap -T4 -A -v )</span> </b></p><p>  <span style="color:red;">一般来说，Intense scan可以满足一般扫描</span>   </p><p>   <span style="color:red;">   -T4 加快执行速度</span> </p><p>   <span style="color:red;">    -A 操作系统及版本探测</span> </p><p>   <span style="color:red;"> -v 显示详细的输出</span> </p></li><li><p>第二种：Intense scan plus UDP</p><pre><code>  (nmap -sS -sU -T4 -A -v)  即UDP扫描  -sS  TCP SYN 扫描  -sU  UDP 扫描</code></pre></li><li><p>第三种：Intense scan,all TCP ports</p><pre><code>  (nmap -p 1-65536 -T4 -A -v)  扫描所有TCP端口，范围在1-65535，试图扫描所有端口的开放情况，速度比较慢。  -p 指定端口扫描范围</code></pre></li><li><p>第四种：Intense scan,no ping</p><pre><code>  (nmap -T4 -A -v -Pn)  非ping扫描  -Pn 非ping扫描</code></pre></li><li><p>第五种：Ping scan</p><pre><code>  (nmap -sn)  Ping 扫描  优点：速度快。  缺点：容易被防火墙屏蔽，导致无扫描结果  -sn ping扫描</code></pre></li><li><p>第六种：Quick scan</p><pre><code>  (nmap -T4 -F)  快速的扫描  -F 快速模式。</code></pre></li><li><p>第七种：Quick scan plus</p><pre><code>  (nmap -sV -T4 -O -F --version-light)  快速扫描加强模式  -sV 探测端口及版本服务信息。  -O 开启OS检测  --version-light 设定侦测等级为2。</code></pre></li><li><p>第八种：Quick traceroute</p><pre><code>  (nmap -sn --traceroute)  路由跟踪  -sn Ping扫描，关闭端口扫描  -traceroute 显示本机到目标的路由跃点。</code></pre></li><li><p>第九种：Regular scan</p><pre><code>  规则扫描</code></pre></li><li><p>第十种：Slow comprehensive scan 慢速全面扫描</p><pre><code>  (nmap -sS -sU -T4 -A -v -PE -PP -PS80,443,-PA3389,PU40125 -PY -g 53 --script all)</code></pre></li></ul><h2 id="MSF的功能模块介绍"><a href="#MSF的功能模块介绍" class="headerlink" title="MSF的功能模块介绍:"></a>MSF的功能模块介绍:</h2><ul><li><p>1、Auxiliary（辅助模块）</p><pre><code> 为渗透测试信息搜集提供了大量的辅助模块支持</code></pre></li><li><p>2、Exploits（攻击模块）</p><pre><code>  利用发现的安全漏洞或配置弱点对远程目标系统 进行攻击，从而获得对远程目标系统访问权的代码组件。</code></pre></li><li><p>3、Payload（攻击载荷模块）</p><pre><code>  利用漏洞之前要先建立一个Payload,其作用是确定漏洞攻击成功之后要执行什么操作，Payload基本上是用于访问远程计算机的反向shell和通过shel植入后门等到被入侵的电脑</code></pre></li><li><p>4、Post （后渗透攻击模块）</p><pre><code>  收集更多信息或进一步访问被利用的目标系统</code></pre></li><li><p>5、Encoders（编码模块）</p><pre><code>  不能确保所有Metasploit中的exp都可以正常工作，有时候 会遇到防火墙、IPS、IDc等，所有的试图攻击等可能会被 防火墙过滤掉，这时候就需要使用Encoders来对exp进行编码等，用来逃避防火墙、IPS、IDs的检测</code></pre></li><li><p>6、ptions-选项</p></li></ul><h3 id="实战漏洞利用"><a href="#实战漏洞利用" class="headerlink" title="实战漏洞利用"></a>实战漏洞利用</h3><p>查找目标地址：<br>arp-scan -l</p><p>利用nmap命令探测主机信息：<br>nmap -T4 -A -v 目标IP地址</p><p>进入msf：<br>msfconsole</p><p>利用msf的auxiliary模块进行漏洞验证：</p><ol><li>search ms17-010</li><li>use  exploit（使用其中的渗透攻击（exploit）模块，对其进行渗透攻击）</li><li>set  rhost  目标IP地址</li><li>set  rport   端口号</li><li>set  lhost   本体IP地址</li><li>run （执行）</li></ol><h2 id="wireshark的用法"><a href="#wireshark的用法" class="headerlink" title="wireshark的用法"></a>wireshark的用法</h2><h3 id="WireShark-主要分为这几个界面："><a href="#WireShark-主要分为这几个界面：" class="headerlink" title="WireShark 主要分为这几个界面："></a>WireShark 主要分为这几个界面：</h3><ol><li>Display Filter(显示过滤器)，  用于过滤</li><li>Packet List Pane(封包列表)， 显示捕获到的封包， 有源地址和目标地址，端口号。 颜色不同，代表</li><li>Packet Details Pane(封包详细信息), 显示封包中的字段</li><li>Dissector Pane(16进制数据)</li><li>Miscellanous(地址栏，杂项)</li></ol><h3 id="过滤表达式的规则"><a href="#过滤表达式的规则" class="headerlink" title="过滤表达式的规则"></a>过滤表达式的规则</h3><ol><li>协议过滤<br>比如TCP，只显示TCP协议。</li><li>IP 过滤<br>比如 ip.src &#x3D;&#x3D;192.168.1.102 显示源地址为192.168.1.102，<br>ip.dst&#x3D;&#x3D;192.168.1.102, 目标地址为192.168.1.102</li><li>端口过滤<br>tcp.port &#x3D;&#x3D;80,  端口为80的<br>tcp.srcport &#x3D;&#x3D; 80,  只显示TCP协议的愿端口为80的。</li><li>Http模式过滤<br>http.request.method&#x3D;&#x3D;”GET”,   只显示HTTP GET方法的。</li><li>逻辑运算符为 AND&#x2F; OR</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端</title>
      <link href="/2022/06/04/%E5%89%8D%E7%AB%AF/"/>
      <url>/2022/06/04/%E5%89%8D%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><span id="more"></span><h2 id="结构性定义"><a href="#结构性定义" class="headerlink" title="结构性定义"></a>结构性定义</h2><p>文件类型&lt;HTML&gt;&lt;&#x2F;HTML&gt; （放在档案的开头与结尾）</p><p>　　文件主题&lt;TITLE&gt;&lt;&#x2F;TITLE&gt; （必须放在「文头」区块内）</p><p>　　文头&lt;HEAD&gt;&lt;&#x2F;HEAD&gt; （描述性资料，像是「主题」）</p><p>　　文体&lt;BODY&gt;&lt;&#x2F;BODY&gt; （文件本体）</p><p>　　标题&lt;H?&gt;&lt;&#x2F;H?&gt; （从1到6，有六层选择）</p><p>　　标题的对齐 &lt;H?ALIGN&#x3D;LEFT|CENTER|RIGHT&gt;&lt;&#x2F;H?&gt;</p><p>　　区分&lt;DIV&gt;&lt;&#x2F;DIV&gt;</p><p>　　区分的对齐 &lt;DIVALIGN&#x3D;LEFT|RIGHT|CENTER|JUSTIFY&gt;&lt;&#x2F;DIV&gt;</p><p>　　引文区块&lt;BLOCKQUOTE&gt;&lt;&#x2F;BLOCKQUOTE&gt; （通常会内缩）</p><p>　　强调&lt;EM&gt;&lt;&#x2F;EM&gt; （通常会以斜体显示）</p><p>　　特别强调&lt;STRONG&gt;&lt;&#x2F;STRONG&gt; （通常会以加粗显示）</p><p>　　引文&lt;CITE&gt;&lt;&#x2F;CITE&gt; （通常会以斜体显示）</p><p>　　码&lt;CODE&gt;&lt;&#x2F;CODE&gt; （显示原始码之用）</p><p>　　样本&lt;SAMP&gt;&lt;&#x2F;SAMP&gt;</p><p>　　键盘输入&lt;KBD&gt;&lt;&#x2F;KBD&gt;</p><p>　　变数&lt;VAR&gt;&lt;&#x2F;VAR&gt;</p><p>　　定义&lt;DFN&gt;&lt;&#x2F;DFN&gt; （有些浏览器不提供）</p><p>　　地址 &lt;ADDRESS&gt;&lt;&#x2F;ADDRESS&gt;</p><p>　　大字&lt;BIG&gt;&lt;&#x2F;BIG&gt;</p><p>　　小字&lt;SMALL&gt;&lt;&#x2F;SMALL&gt;</p><p>　　与外观相关的标签（作者自订的表现方式）</p><p>　　加粗&lt;B&gt;&lt;&#x2F;B&gt;</p><p>　　斜体&lt;I&gt;&lt;&#x2F;I&gt;</p><p>　　底线&lt;U&gt;&lt;&#x2F;U&gt; （尚有些浏览器不提供）</p><p>　　删除线&lt;S&gt;&lt;&#x2F;S&gt; （尚有些浏览器不提供）</p><p>　　下标&lt;SUB&gt;&lt;&#x2F;SUB&gt;</p><p>　　上标&lt;SUP&gt;&lt;&#x2F;SUP&gt;</p><p>　　打字机体&lt;TT&gt;&lt;&#x2F;TT&gt; （用单空格字型显示）</p><p>　　预定格式&lt;PRE&gt;&lt;&#x2F;PRE&gt; （保留文件中空格的大小）</p><p>　　预定格式的宽度&lt;PRE WIDTH&#x3D;?&gt;&lt;&#x2F;PRE&gt;（以字元计算）</p><p>　　向中看齐&lt;CENTER&gt;&lt;&#x2F;CENTER&gt; （文字与图片都可以）</p><p>　　闪耀&lt;BLINK&gt;&lt;&#x2F;BLINK&gt; （有史以来最被嘲弄的标签）</p><p>　　字体大小 &lt;FONTSIZE&#x3D;?&gt;&lt;&#x2F;FONT&gt;（从1到7）</p><p>　　改变字体大小 &lt;FONTSIZE&#x3D;+|-?&gt;&lt;&#x2F;FONT&gt;</p><p>　　基本字体大小 &lt;BASEFONTSIZE&#x3D;?&gt; （从1到7; 内定为3）</p><p>　　字体颜色 &lt;FONTCOLOR&#x3D;”#$$”&gt;&lt;&#x2F;FONT&gt;（$$为颜色代码）</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><!-- more --><p>1、CSS，即层叠样式表，用来规定网页显示效果的。</p><p>2、CSS的基本工作原理，选择器{ 样式声明; 样式声明; 样式声明; …… }</p><p>3、常见的选择器：标签选择器（所有的HTML标签都可以作为标签选择器，记住标签选择器前面没有任何符号）、类选择器（对应HTML的class属性，类选择器前面是英文小数点，例如.box{ width:200px;}）、ID选择器（对应HTML的id属性，ID选择器前面是#，例如#tips{ color:red;}）</p><p>4、常见的9个文本和字体属性如下：</p><ol><li><p>color 定义字体颜色属性。例如color:red;</p></li><li><p>font-family 定义字体类型属性。例如font-family: “宋体”;</p></li><li><p>font-size 定义字体大小属性。例如font-size: 16px;</p></li><li><p>font-weight 定义字体粗细属性。例如字体加粗定义为font-weight: bold;</p></li><li><p>font-style 定义字体风格属性。例如文字倾斜定义为font-style: oblique;</p></li><li><p>line-height 定义行间距属性，即行高。例如，line-height: 24px;单行文本垂直居中，将行高设置为方框盒子的高度值。</p></li><li><p>text-align 定义文本对齐属性。例如文本右对齐则定义为text-align:right;</p></li><li><p>text-indent 定义文本缩进属性（段首缩进）。例如文本首行缩进text-indent:32px;</p></li><li><p>text-decoration定义文本修饰属性。例如</p></li></ol><p>上划线 text-decoration: overline;</p><p>下划线 text-decoration: underline;</p><p>删除线 text-decoration:line-through;</p><p>5、背景属性background，其子属性有：background-color（背景颜色）、background-image（背景图像）、background-repeat（背景重复属性）、background-position（背景定位属性）。</p><p>6、盒子模型相关属性：</p><ol><li><p>内边距：padding</p></li><li><p>外边距：margin，margin:0 auto;该元素相对于其父类居中显示。</p></li><li><p>边框：border（子属性有：border-color边框颜色、border-width边框宽度、border-style边框样式）</p></li><li><p>元素内容尺寸：width元素内容宽度属性、height元素内容高度属性。</p></li></ol><p>注意：padding、margin和border属性有方向。</p><p>7、盒子的浮动相关属性：</p><ol><li><p>float属性：定义盒子向左或右浮动。</p></li><li><p>overflow属性：定义盒子溢出时的显示效果。当一个方框盒子没有定义高度时，需要使用overflow:hidden;</p></li><li><p>display属性：规定HTML元素是显示为块级元素还是行内元素。块级元素默认的显示为block，行内元素默认显示为inline。将行内元素转化为块级元素可以使用“display:block;”，将块级元素转化为行内元素可以使用“display:inline;”。</p></li></ol><p>8、常见的块级元素：body、&lt;h#&gt;、&lt;p、&lt;ul&gt;&#x2F;&lt;li&gt;，&lt;ol&gt;&#x2F;&lt;li&gt;，&lt;dl&gt;&#x2F;&lt;dt&gt;&#x2F;&lt;dd&gt;，&lt;hr&gt;等；</p><p>常见的行内元素：&lt;img&gt;、&lt;a&gt;、&lt;span&gt;、&lt;em&gt;、&lt;strong&gt;</p><p>9、可用于网页排版的CSS属性：float、position（相对定位于绝对定位数学），margin:0 auto;其中float与position属性会改变HTML文档的文档流属性，而margin:0 auto；不会改变HTML文档的文档流属性。</p><p>10、文档流：标准文档流与非标准文档流，标准文档流是指HTML元素自然排列（即没有使用float与position属性。）</p><p>11、绝对多数的块级元素都有默认的内外边距（padding，margin）。div标签没有默认的内外边距。</p><p>12、CSS样式表的优先级：行内式&gt;内嵌式&gt;外部式样式表。</p><p>13、CSS选择器的优先级：</p><p>以下是一个按特性分类的选择符的列表：</p><p>h2{color:blue;} 特性值为：1</p><p>p em {color:purple;} 特性值为：2</p><p>.apple {color:red;} 特性值为：10</p><p>p.bright {color:yellow;} 特性值为：11</p><p>p.bright em.dark {color:brown;} 特性值为：22</p><p>#id316 {color:yellow} 特性值为：100</p><p>从上表我们可以看出#id316具有更高的特殊性，因而它有更高的权重。当有多个规则都能应用于同一个元素时，权重越高的样式将被优先采用。</p><p>14、padding（内边距），margin（外边距），height（高度），background（背景）、display属性、overflow属性等都是不继承的。</p><p>15、*{padding:0; margin:0; list-style-type:none; }其中“*”代表通配符，这种全局声明，也叫做通用选择器。</p><p>16、CSS锚伪类：</p><p>a:link{ color:red;}</p><p>a:visited{ color:blue;}</p><p>a:hover{color:yellow;}</p><p>a:active{ color:purple;}</p><p>a:hover必须放在a:link{}和a:visited{}之后，</p><p>a:active必须放在a:hover的后面。</p><p>17、合理的设置TDK标签（网页三标签）有助于SEO，TDK指的是网页标题标签&lt;title&gt;、网页描述标签description以及网页关键词标签keywords。</p><p>18、有助于网站优化的HTML文档结构必须要有meta标签定义的description与keywords：</p><p>&lt;html&gt;</p><p>&lt;head&gt;</p><p>&lt;meta charset&#x3D;”utf-8”&gt;</p><p>&lt;title&gt;HTML基础&lt;&#x2F;title&gt;</p><p>&lt;meta name&#x3D;”description” content&#x3D;”网页正文摘要”&gt;（说明）</p><p>&lt;meta name&#x3D;”keywords” content&#x3D;”网页关键词”&gt;（关键字）</p><p>&lt;link href&#x3D;”yangshi.css” rel&#x3D;”stylesheet” type&#x3D;”text&#x2F;css”&gt;</p><p>&lt;&#x2F;head&gt;</p><p>&lt;body&gt;</p><p>网页内容</p><p>&lt;&#x2F;body&gt;</p><p>&lt;&#x2F;html&gt;</p><p>19、网页的字符集charset包括：utf-8(国际通用字符集)、gbk（gb2312、gb18030等简体中文字符集）、big5（繁体中文字符集）。</p><p>20、图片&lt;img &#x2F;&gt;标签必须要书写alt属性，以便于搜索引擎更好的识别图片内容。</p><p>21、&lt;h#&gt;标签默认效果为强调：加粗、默认字号、换行效果，合理的使用H标签（特别是H1、H2和H3），有利于搜索引擎快速的了解网页的主题内容。其中H1标签在一个网页只能够使用1次，一般在文章标题处使用。</p><p>22、选择图片素材的时候，在不影响图片清晰度前提下，图片所占用的空间要最小。</p><p>23、所谓的超链接是指从一个网页指向一个目标的连接关系，这个目标可以是另一个网页，也可以是相同网页上的不同位置，还可以是一个图片，一个电子邮件地址，一个文件，甚至是一个应用程序。</p><p>24、超链接是搜索引擎蜘蛛不断地抓取网页的桥梁。</p><p>25、URL：统一资源定位符，是Uniform Resource Locator的缩写，也被称为网页地址，是Internet上标准的资源地址。Internet上的每一个网页对应一个唯一的URL地址。</p><p>任何一个URL，它只会指向一个网页。</p><p>以新浪体育网和腾讯体育网的NBA频道为例：</p><p>&#x2F;nba&#x2F;：相对地址</p><p><a href="http://sports.sina.com.cn/nba/%E7%BB%9D%E5%AF%B9%E5%9C%B0%E5%9D%80">http://sports.sina.com.cn/nba/绝对地址</a></p><p><a href="https://sports.qq.com/nba/%E7%BB%9D%E5%AF%B9%E5%9C%B0%E5%9D%80">https://sports.qq.com/nba/绝对地址</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript脚本</title>
      <link href="/2022/06/04/javascript/"/>
      <url>/2022/06/04/javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue项目</title>
      <link href="/2022/06/04/vue/"/>
      <url>/2022/06/04/vue/</url>
      
        <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客发布</title>
      <link href="/2022/06/01/%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83/"/>
      <url>/2022/06/01/%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h1 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h1><h2 id="新建一个文章：hexo-new-“文章的名字”"><a href="#新建一个文章：hexo-new-“文章的名字”" class="headerlink" title="新建一个文章：hexo new “文章的名字”"></a>新建一个文章：hexo new “文章的名字”</h2><h2 id="生成静态网站：hexo-g-或者-hexo-generate"><a href="#生成静态网站：hexo-g-或者-hexo-generate" class="headerlink" title="生成静态网站：hexo g 或者 hexo generate"></a>生成静态网站：hexo g 或者 hexo generate</h2><h2 id="运行本地网站：hexo-s-或者-hexo-server"><a href="#运行本地网站：hexo-s-或者-hexo-server" class="headerlink" title="运行本地网站：hexo s 或者 hexo server"></a>运行本地网站：hexo s 或者 hexo server</h2><h2 id="发布到上GitHub：hexo-d-或者-hexo-deploy"><a href="#发布到上GitHub：hexo-d-或者-hexo-deploy" class="headerlink" title="发布到上GitHub：hexo d 或者 hexo deploy"></a>发布到上GitHub：hexo d 或者 hexo deploy</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习站</title>
      <link href="/2022/05/31/%E5%AD%A6%E4%B9%A0%E7%AB%99/"/>
      <url>/2022/05/31/%E5%AD%A6%E4%B9%A0%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><span id="more"></span><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><h3 id="点击下面蓝色字体练习："><a href="#点击下面蓝色字体练习：" class="headerlink" title="点击下面蓝色字体练习："></a>点击下面蓝色字体练习：</h3><p><a href="https://www.bilibili.com/video/BV1Kf4y1j7Ap?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">音标练习</a></p><p><a href="https://www.bilibili.com/video/BV1Vv411i7Vo?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">3800单词</a></p><h2 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h2><p><a href="https://www.bilibili.com/video/BV1KJ411J7WF?spm_id_from=333.337.search-card.all.click">函数</a></p><h5 id="以下等待补充…"><a href="#以下等待补充…" class="headerlink" title="以下等待补充…"></a>以下等待补充…</h5><hr><h1 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h1><p><a href="https://www.runoob.com/">菜鸟学院</a></p><p><a href="https://www.w3school.com.cn/">w3school</a></p><p><a href="https://www.icourse163.org/">大学生慕课</a></p><hr><h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><p><img src="https://img0.baidu.com/it/u=821012013,1391852924&fm=253&fmt=auto&app=138&f=JPEG?w=530&h=500" alt="懒洋洋"></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1859715428&auto=0&height=66"></iframe>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一</title>
      <link href="/2022/05/31/article-name/"/>
      <url>/2022/05/31/article-name/</url>
      
        <content type="html"><![CDATA[<h1 id="我的文章"><a href="#我的文章" class="headerlink" title="我的文章"></a>我的文章</h1><span id="more"></span><h2 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1859715428&auto=0&height=66"></iframe>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
